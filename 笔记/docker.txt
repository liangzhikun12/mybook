						docker
官网：https://hub.docker.com/
＃163镜像加速
[root@room9pc01 ~]# vim /etc/docker/daemon.json 
{
"registry-mirrors": ["http://hub-mirror.c.163.com"]
}

[root@room9pc01 ~]# docker version
 Version:         1.13.1
#显示版本
[root@room9pc01 ~]# docker info
＃查看全部信息
[root@room9pc01 ~]# docker search nginx
＃搜索nginx镜像
＃alpine
alpine是专门构建小镜像的工具
[root@room9pc01 ~]# docker image pull nginx:1.14-alpine
＃下载alpine nginx镜像
]#docker pull busbox
＃下载busybox镜像
[root@room9pc01 ~]# docker image ls
＃显示所有镜像
[root@room9pc01 ~]# docker image ls --no-trunc
＃显示完整的详细信息
]#docker container --help
＃查看help帮助
]#docker container ls -a
 #查看全部容器
]#docker container ls
＃查看正在运行的容器
]#docker network ls
＃查看全部docker网卡
[root@room9pc01 ~]# docker run --name b1 -it busybox:latest
＃创建ｂ１容器，把busybox:latest镜像打包进去
//在busybox做http网页
/ # mkdir /data/html -p
/ # vi /data/html/index.html
wo shi busybox
/ # httpd -f -h /data/html/

[root@room9pc01 ~]# docker inspect b1
＃查看容器b1的详细信息
"IPAddress": "172.17.0.2",
[root@room9pc01 ~]# curl 172.17.0.2
＃访问b1容器的网页

[root@room9pc01 ~]# docker start -i -a b1
＃激活b1容器
[root@room9pc01 ~]# docker kill b1
＃终止b1容器
[root@room9pc01 ~]# docker rm b1
＃删除b1容器
[root@room9pc01 ~]# docker run --name web1 -d nginx:1.14-alpine
＃在后台运行nginx:1.14-alipine容器，-d是在后台运行的意思
[root@room9pc01 ~]# docker inspect web1
＃
[root@room9pc01 ~]# curl 172.17.0.2
＃访问nginx页面
[root@room9pc01 ~]# docker run --name k1 -d redis:4-alpine
＃在后台运行redis:4-alpine镜像，创建k1容器
[root@room9pc01 ~]# docker ps
＃查看全部容器
[root@room9pc01 ~]# docker exec -it k1 /bin/sh
＃-it指的是进入交互模式，在k1容器运行/bin/sh命令
/data # ps
PID   USER     TIME  COMMAND
    1 redis     0:00 redis-server
   13 root      0:00 /bin/sh
   19 root      0:00 ps
-docker image
#docker镜像含有启动容器所需要的文件系统及其内容，因此，其用与创建并启动docker容器，
采用分层构建机制，最底层为bootfs，其之为rootfs
bootfs：用于系统引导的文件系统，包括bootloader和kernel，容器启动完成后会被卸载已节约内存资源
rootfs:位于bootfs之上，表现为docker容器的根文件系统
docker中，rootfs由内核挂载为“只读”模式，而后通过“联合挂载”技术额外挂载一个“可写”层
—位于下层的镜像称为父镜像，最底层的称为基础镜像
—最上层为可读写层，其下的均为只读层

＃aufs：高级多层统一文件系统
用于linux文件系统实现“联合挂载”

＃docker　registry
*启动容器时，docker daemon会试图从本地获取相关的镜像；本地镜像不存在时，其将从registry中下载该
镜像并保存到本地

＃docker　registry分类
registry用于保存docker镜像，包括镜像的层次结构和元数据
用户可自建registry，也可使用官方的Docker Hub

https://quay.io/	＃docker镜像网址
搜索：flannel
点tags
[root@room9pc01 ~]# docker pull quay.io/coreos/flannel:v0.10.0-amd64
#下载flannel:v0.10.0-amd64镜像

*镜像的生成途径
—dockerfile
—基于容器制作

*基于容器制作镜像
[root@room9pc01 ~]# docker run --name b1 -it busybox
#运行b1容器
/ # mkdir -p /data/html
/ # vi /data/html/index.html
<h1>wo shi busybox <h1>
＃制作一个简单的网页
[root@room9pc01 ~]# docker commit -p b1
＃用ｂ１容器制作镜像
[root@room9pc01 ~]# docker image ls
＃查看镜像
REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
<none>                        <none>              92dca442b17f        59 seconds ago      1.2 MB
[root@room9pc01 ~]# docker tag 92dca442b17f mageedu/httpd:v10
#修改镜像标签（ｔａｇ）
[root@room9pc01 ~]# docker image ls
＃查看所有镜像
[root@room9pc01 ~]# docker tag  mageedu/httpd:v10 httpd/h1:v1
＃更改标签（ｔａｇ）
[root@room9pc01 ~]# docker login -u 1245047618
#登录docker帐号
[root@room9pc01 ~]# docker push 1245047618/http:v0.2
					　　镜像名必须是帐号名字/标签
＃上传镜像到docker hub
[root@room9pc01 ~]# docker save -o myimage.gz mageedu/http:v0.2 mageedu/httpd:v10
#镜像导入，命名为myimage.gz
[root@room9pc01 ~]# scp myimage.gz localhost
[root@localhost ~]# docker load -i myimage.gz
＃镜像导出
[root@room9pc01 ~]# brctl show
＃查看网桥
[root@room9pc01 ~]# iptables -t nat -vnL
#查看ip nat
[root@room9pc01 ~]# docker start web1
#开启web1容器
/ # netstat -ntulp
＃查看nginx端口
b1：
/ # wget -O - -q http://172.17.0.4
＃访问网页
[root@localhost ~]# docker network inspect  bridge
＃查看docker网桥的详细信息
[root@room9pc01 ~]# docker container inspect web1
＃查看web1容器的详细信息
[root@node03 ~]# ip netns　＃网络虚拟化
[root@node03 ~]# ip netns add r1	＃创建r1网络空间
[root@node03 ~]# ip netns add r２	＃创建r2网络空间
[root@node03 ~]# ip netns list		＃查看网络空间
[root@node03 ~]# ip netns exec r1 ifconfig -a
＃在网络空间执行命令
[root@node03 ~]# ip link add name veth1.1 type veth peer name veth1.2
＃添加两张虚拟网卡veth1.1和veth1.2
[root@node03 ~]# ip link		＃查看连接网络
[root@node03 ~]# ip link set dev veth1.2 netns r1		＃把veth1.2虚拟网卡移动到r1虚拟空间
[root@node03 ~]# ip netns exec r1 ifconfig -a		＃查询r1网络空间网卡
[root@node03 ~]# ip netns exec r1 ip link set dev veth1.2 name eth0
＃veth1.2改名为eth0
[root@node03 ~]# ip netns exec r1 ifconfig -a
#查询
[root@node03 ~]# ifconfig veth1.1 10.1.0.1/24 up
＃给veth1.1配置ip地址并激活
[root@node03 ~]# ip netns exec r1 ifconfig eth0 10.1.0.2/24 up
＃给eth0配置ip地址
[root@node03 ~]# ip netns exec r1 ifconfig
＃查询
[root@node03 ~]# ip link set dev veth1.1 netns r2
＃把veth1.1添加到r2空间
[root@node03 ~]# ip netns exec r2 ifconfig -a
＃查询r2空间网卡ip地址
[root@node03 ~]# ip netns exec r2 ifconfig veth1.1 10.1.0.3/24 up
＃配置veth1.1ip地址并激活
[root@node03 ~]# ip netns exec r2 ping 10.1.0.2
＃ping r1空间的网卡
[root@node02 ~]# docker run --name t1 -it --rm busybox:latest
＃创建t1容器退出后自动删除
[root@node02 ~]# docker run --name t1 -it --network bridge --rm busybox:latest
＃创建一个连接网桥的容器
/ # ifconfig	＃查看ip 地址
[root@node02 ~]# docker run --name t1 -it --network none --rm busybox:latest
＃创建一个没有网卡的容器
/ # ifconfig
[root@node02 ~]# docker run --name t1 -it --network bridge -h t1.busybox --rm　buybox:latest
#创建容器时更改主机名
/ # nslookup -type=A www.baidu.com　	＃域名解析
[root@node02 ~]# docker run --name t1 -it --network bridge -h t1.linux --dns 114.114.114.114 --dns-search ilinux.io --rm busybox:latest
＃基于域名解析的容器
[root@node02 ~]#　ocker run --name t1 -it --network bridge -h t1.linux --dns 114.114.114.114 --dns-search ilinux.io  --add-host www.magedu.com:1.1.1.1 --rm busybox:latest
＃基于域名解析的容器
/ # cat /etc/resolv.conf 
search ilinux.io
nameserver 114.114.114.114
 ＃查看容器域名解析





































































































